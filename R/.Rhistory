X.imp
X.imp2 <- impute(X)
X.imp2
str(X.imp2)
X.imp2
X.imp2
X.imp2$age
amelia(X)
nominal
amelia(X, noms=c("workclass", "edu", "married", "occupation", "relationship", "race", "sex", "country", "rich"))
amelia(X, noms=c("workclass", "edu", "married", "occupation", "relationship", "race", "sex", "country", "rich"), amcheck=F)
str(X)
str(X.train)
str(X.all)
amelia(X, noms=c("workclass", "edu", "married", "occupation", "relationship", "race", "sex", "country"), amcheck=F)
amelia(X.all, noms=c("workclass", "edu", "married", "occupation", "relationship", "race", "sex", "country"), amcheck=F)
corr(X.all)
cov(X.all)
X.imp.ame
str(X.imp.ame)
pwd
os.dor
os.dir
dir
dir()
md.pattern(X)
md.pattern(X)
md.pattern(X.all)
tempData
str(tempData)
tempData$imp
complete(tempData)
complete(tempData, action = 1)
complete(tempData, action = 1, include )
complete(tempData, action = 1, include = F)
X.imp.ame
str(X.imp.ame)
X.imp.ame$imputations$imp1
summary(X.imp.ame)
<<<<<<< HEAD
X.all <- rbind(X.train, X.test)
X.test <- read.csv("../data/test.csv", header = T,
              colClasses=c('numeric', 'factor', 'factor',
                           'numeric', 'factor', 'factor',
                           'factor', 'factor', 'factor',
                           'numeric', 'numeric', 'numeric',
                           'factor'))
X.test <- read.csv("../data/test.csv", header = T,
              colClasses=c('numeric', 'factor', 'factor',
                           'numeric', 'factor', 'factor',
                           'factor', 'factor', 'factor',
                           'numeric', 'numeric', 'numeric',
                           'factor'))
str(X.imp.mice)
X.imp.mice$pad
X.imp.mice$pad$data
summary(X.imp.mice)
str(X.train)
str(X.train)
=======
summary(X.train)
str(X.train)
summary(X.train)
>>>>>>> 21c87074c9845c042fb6e216d54af3f557465a81
str(X)
str(X.unique)
?unique
t
str(t)
str(X)
X$rich
X$y
t
plot(t)
plot(t$y)
help(density)
X$y
density(X$age)
a <- density(X$age)
a
plot(a)
X[:, which(X$y == 1)]
X[, which(X$y == 1)]
X$y
X[, which(X$y == 1)]
which(X$y == 1)
X$age[msk.pos]
plot(a)
plot(b)
plot(a), lines(b)
plot(a); lines(b)
plot(b); lines(a)
str(X)
X
str(X.all(
)
)
str(X.all)
mean(apply(X.all,2,pMiss))
mean(apply(X.train,2,pMiss))
mean(apply(X.test,2,pMiss))
head(X)
head(X, 100)
head(X, 100)
md.pattern(X.train)
str(X)
marginplot(X.all[,c(3, 6)])
marginplot(X.all[,c(1, 2)])
marginplot(X.all[,c(2, 2)])
marginplot(X.all[,c(2, 3)])
data(agingdata)
agingdata
str(agingdata)
xx <- Impute(agingdata, imputation.method = "dist.free")
xx <- Impute(matrix(agingdata), imputation.method = "dist.free")
xx <- Impute(as.matrix(agingdata), imputation.method = "dist.free")
xx
str(xx)
xx$yimp
head(xx$yimp)
head(agingdata)
xx <- Impute(as.matrix(agingdata), imputation.method = "normal")
head(xx$yimp)
TestMCARNormality(X)
str(X)
str(X.train.cont)
TestMCARNormality(X.train.cont)
spintMiss(X.train)
spineMiss(X.train)
spineMiss(X.train)
spineMiss(X.train)
spineMiss(X.train)
scattmatrixMiss(X.train)
scattmatrixMiss(X.train.cont)
pbox(X.train.cont)
pbox(X.train)
pbox(X.train, pos=2)
pbox(X.train, pos=3)
pbox(X.train, pos=4)
parcoord(X.train)
parcoordMiss(X.train)
pairsVim(X.train)
pairsVIM(X.train)
mosaicMiss(X.train)
mosaicMiss(X.train.cont)
mosaicMiss(X.train[,c(1,2)])
matrixplot(X.train.cont)
marginplot(X.train.cont)
marginmatrix(X.train.cont)
marginmatrix(X.train)
help(complete)
sprintf("aaa%d.csv", 1)
save(X.imp.mice, file="X.imp.mice.RData")
X.imp.imce
X.imp.mice
y
?with
cbind(X.imp.mice, y)
?rep
a <- c(1,2,3)
rep(a, 3)
cbind(X.imp.mice, rep(y, 5))
y
str(y)
str(X.imp.mice)
summary(modelFit1)
pool(modelFit1)
summary(pool(modelFit1))
summary(pool(modelFit1))
modelFit1
cbind.mids(X.imp.mice, y)
cbind.mids(X.imp.mice, rep(y, 5))
cbind.mids(X.imp.mice, rep(y, 25))
X.imp.mice
X.imp.mice[1:1000,]
summary(modelFit1)
pool(summary(modelFit1))
pool(modelFit1)
X.all
str(X.all)
str(X.all)
X.all[[1]]
str(X.all[[1]])
str(X.all[[2]])
str(y)
str(X.all)
str(X.train)
trainIdx
str(trainIdx)
trainIdx[[2]]
str(trainIdx)
trainIdx[[2]]
length(trainIdx[[2]])
str(trainIdx)
str(trainIdx)
1:10
str(X.test.cv)
preds
preds
which(preds > 0.5)
preds > 0.5
str(preds > 0.5)
table(preds > 0.5)
table(preds > 1.0)
table(preds > 0.3)
table(y)
182 / (869 + 182)
2500 / 10500
preds > 0.6
table(preds > 0.6)
preds > 0.6 - 1
(preds > 0.6) - 1
(preds > 0.6) - 0
as.integer(y.test.cv)
as.integer(y.test.cv) - 1
as.numeric(y.test.cv) - 1
as.numeric(y.test.cv)
for (i in 1:k) {
    ## Get target labels
    y.train.cv <- y[train.idx.all[[i]]]
    y.test.cv <- y[-train.idx.all[[i]]]
    ## For all imputations
    for (j in 1:m) {
        ## Get current imputation
        X.cur <- X.train[[j]]
        ## Split into train and test
        X.train.cv <- X.cur[train.idx.all[[i]], ]
        X.test.cv <- X.cur[-train.idx.all[[i]], ]
        ## Fit model and predict for test set
        mdl <- glm(y ~ ., data = X.train.cv, family='binomial')
        preds <- predict(mdl, X.test.cv, type = 'response')
        errs <- sum(abs((preds > 0.5) - (as.numeric(y.test.cv) - 1)))
        print(1 - (errs / length(y.test.cv)))
    }
}
formula(*.*)
formula(.*.)
str(X.train)
str(X.train[[1]])
for (i in 1:k) {
    ## Get target labels
    y.train.cv <- y[train.idx.all[[i]]]
    y.test.cv <- y[-train.idx.all[[i]]]
    preds <- list()
    ## For all imputations
    for (j in 1:m) {
        ## Get current imputation
        X.cur <- X.train[[j]]
        ## Split into train and test
        X.train.cv <- X.cur[train.idx.all[[i]], ]
        X.test.cv <- X.cur[-train.idx.all[[i]], ]
        ## Fit model and predict for test set
        mdl <- glm(y ~ ., data = X.train.cv, family='binomial')
        ## preds[[j]] <- predict(mdl, X.test.cv, type = 'response')
        preds <- predict(mdl, X.test.cv, type = 'response')
    }
    errs <- sum(abs((preds > 0.5) - (as.numeric(y.test.cv) - 1)))
    print(1 - (errs / length(y.test.cv)))
}
for (i in 1:k) {
    ## Get target labels
    y.train.cv <- y[train.idx.all[[i]]]
    y.test.cv <- y[-train.idx.all[[i]]]
    preds <- list()
    ## For all imputations
    for (j in 1:m) {
        ## Get current imputation
        X.cur <- X.train[[j]]
        ## Split into train and test
        X.train.cv <- X.cur[train.idx.all[[i]], ]
        X.test.cv <- X.cur[-train.idx.all[[i]], ]
        ## Fit model and predict for test set
        mdl <- with(X.train.cv, glm(y ~ . , data = X.train.cv, family='binomial'))
        ## preds[[j]] <- predict(mdl, X.test.cv, type = 'response')
        preds <- predict(mdl, X.test.cv, type = 'response')
    }
    errs <- sum(abs((preds > 0.5) - (as.numeric(y.test.cv) - 1)))
    print(1 - (errs / length(y.test.cv)))
}
for (i in 1:k) {
    ## Get target labels
    y.train.cv <- y[train.idx.all[[i]]]
    y.test.cv <- y[-train.idx.all[[i]]]
    preds <- list()
    ## For all imputations
    for (j in 1:m) {
        ## Get current imputation
        X.cur <- X.train[[j]]
        ## Split into train and test
        X.train.cv <- X.cur[train.idx.all[[i]], ]
        X.test.cv <- X.cur[-train.idx.all[[i]], ]
        ## Fit model and predict for test set
        mdl <- with(X.train.cv, glm(y ~ . + income:loss, data = X.train.cv, family='binomial'))
        ## preds[[j]] <- predict(mdl, X.test.cv, type = 'response')
        preds <- predict(mdl, X.test.cv, type = 'response')
    }
    errs <- sum(abs((preds > 0.5) - (as.numeric(y.test.cv) - 1)))
    print(1 - (errs / length(y.test.cv)))
}
str(X.train.cv)
for (i in 1:k) {
    ## Get target labels
    y.train.cv <- y[train.idx.all[[i]]]
    y.test.cv <- y[-train.idx.all[[i]]]
    preds <- list()
    ## For all imputations
    for (j in 1:m) {
        ## Get current imputation
        X.cur <- X.train[[j]]
        ## Split into train and test
        X.train.cv <- X.cur[train.idx.all[[i]], ]
        X.test.cv <- X.cur[-train.idx.all[[i]], ]
        ## Fit model and predict for test set
        mdl <- with(X.train.cv, glm(y ~ . + age:married, data = X.train.cv, family='binomial'))
        ## preds[[j]] <- predict(mdl, X.test.cv, type = 'response')
        preds <- predict(mdl, X.test.cv, type = 'response')
    }
    errs <- sum(abs((preds > 0.5) - (as.numeric(y.test.cv) - 1)))
    print(1 - (errs / length(y.test.cv)))
}
for (i in 1:k) {
    ## Get target labels
    y.train.cv <- y[train.idx.all[[i]]]
    y.test.cv <- y[-train.idx.all[[i]]]
    preds <- list()
    ## For all imputations
    for (j in 1:m) {
        ## Get current imputation
        X.cur <- X.train[[j]]
        ## Split into train and test
        X.train.cv <- X.cur[train.idx.all[[i]], ]
        X.test.cv <- X.cur[-train.idx.all[[i]], ]
        ## Fit model and predict for test set
        mdl <- with(X.train.cv, glm(y ~ . + age:married + sex:country, data = X.train.cv, family='binomial'))
        ## preds[[j]] <- predict(mdl, X.test.cv, type = 'response')
        preds <- predict(mdl, X.test.cv, type = 'response')
    }
    errs <- sum(abs((preds > 0.5) - (as.numeric(y.test.cv) - 1)))
    print(1 - (errs / length(y.test.cv)))
}
for (i in 1:k) {
    ## Get target labels
    y.train.cv <- y[train.idx.all[[i]]]
    y.test.cv <- y[-train.idx.all[[i]]]
    preds <- list()
    ## For all imputations
    for (j in 1:m) {
        ## Get current imputation
        X.cur <- X.train[[j]]
        ## Split into train and test
        X.train.cv <- X.cur[train.idx.all[[i]], ]
        X.test.cv <- X.cur[-train.idx.all[[i]], ]
        ## Fit model and predict for test set
        mdl <- with(X.train.cv, glm(y ~ . + age:married + sex:country + income:loss, data = X.train.cv, family='binomial'))
        ## preds[[j]] <- predict(mdl, X.test.cv, type = 'response')
        preds <- predict(mdl, X.test.cv, type = 'response')
    }
    errs <- sum(abs((preds > 0.5) - (as.numeric(y.test.cv) - 1)))
    print(1 - (errs / length(y.test.cv)))
}
for (i in 1:k) {
    ## Get target labels
    y.train.cv <- y[train.idx.all[[i]]]
    y.test.cv <- y[-train.idx.all[[i]]]
    preds <- list()
    ## For all imputations
    for (j in 1:m) {
        ## Get current imputation
        X.cur <- X.train[[j]]
        ## Split into train and test
        X.train.cv <- X.cur[train.idx.all[[i]], ]
        X.test.cv <- X.cur[-train.idx.all[[i]], ]
        ## Fit model and predict for test set
        mdl <- with(X.train.cv, glm(y ~ . + age:married + sex:country + income:loss + sex:yearsedu, data = X.train.cv, family='binomial'))
        ## preds[[j]] <- predict(mdl, X.test.cv, type = 'response')
        preds <- predict(mdl, X.test.cv, type = 'response')
    }
    errs <- sum(abs((preds > 0.5) - (as.numeric(y.test.cv) - 1)))
    print(1 - (errs / length(y.test.cv)))
}
preds
y.test.csv
y.test.cv
y.train.cv
train.idx.all
for (i in 1:k) {
    ## For all imputations
    for (j in 1:m) {
        ## Get current imputation
        X.cur1 <- X.train[[j]]
        ## Split into train and test
        X.train1.cv <- X.cur1[train.idx.all[[i]], ]
        X.test1.cv <- X.cur1[-train.idx.all[[i]], ]
        preds <- matrix(0, length(y.test.cv), m)
        ## For all train sets
        for (k in 1:m) {
            ## Get current imputation
            X.cur2 <- X.train[[k]]
            ## Split into train and test
            X.train2.cv <- X.cur2[train.idx.all[[i]], ]
            X.test2.cv <- X.cur2[-train.idx.all[[i]], ]
            ## Fit model and predict for test set
            mdl <- glm(y ~ ., data = X.train2.cv, family='binomial')
        ## preds[[j]] <- predict(mdl, X.test.cv, type = 'response')
            preds.cur <- predict(mdl, X.test1.cv, type = 'response')
            preds[,m] <- preds.cur
        }
        print(preds)
        ## TODO: move one step deeper
        errs <- sum(abs((preds > 0.5) - (as.numeric(X.test1.cv$y) - 1)))
        print(1 - (errs / length(X.test1.cv$y)))
}
}
X.test1.cv
for (i in 1:k) {
    ## For all imputations
    for (j in 1:m) {
        ## Get current imputation
        X.cur1 <- X.train[[j]]
        ## Split into train and test
        X.train1.cv <- X.cur1[train.idx.all[[i]], ]
        X.test1.cv <- X.cur1[-train.idx.all[[i]], ]
        preds <- matrix(0, nrow(X.test1.cv), m)
        ## For all train sets
        for (k in 1:m) {
            ## Get current imputation
            X.cur2 <- X.train[[k]]
            ## Split into train and test
            X.train2.cv <- X.cur2[train.idx.all[[i]], ]
            X.test2.cv <- X.cur2[-train.idx.all[[i]], ]
            ## Fit model and predict for test set
            ##mdl <- glm(y ~ ., data = X.train2.cv, family='binomial')
            mdl <- randomForest(y ~ ., data = X.train2.cv)
        ## preds[[j]] <- predict(mdl, X.test.cv, type = 'response')
            preds.cur <- predict(mdl, X.test1.cv, type = 'response')
            #print(preds.cur)
            preds[,k] <- preds.cur
            #print(preds)
            ## TODO: move one step deeper
        }
        preds.combined <- rowSums(preds) / m
        errs <- sum(abs((preds.combined > 0.5) - (as.numeric(X.test1.cv$y) - 1)))
        print(1 - (errs / length(X.test1.cv$y)))
    }
}
for (i in 1:k) {
    ## For all imputations
    for (j in 1:m) {
        ## Get current imputation
        X.cur1 <- X.train[[j]]
        ## Split into train and test
        X.train1.cv <- X.cur1[train.idx.all[[i]], ]
        X.test1.cv <- X.cur1[-train.idx.all[[i]], ]
        preds <- matrix(0, nrow(X.test1.cv), m)
        ## For all train sets
        for (k in 1:m) {
            ## Get current imputation
            X.cur2 <- X.train[[k]]
            ## Split into train and test
            X.train2.cv <- X.cur2[train.idx.all[[i]], ]
            X.test2.cv <- X.cur2[-train.idx.all[[i]], ]
            ## Fit model and predict for test set
            ##mdl <- glm(y ~ ., data = X.train2.cv, family='binomial')
            mdl <- randomForest(y ~ ., data = X.train2.cv)
        ## preds[[j]] <- predict(mdl, X.test.cv, type = 'response')
            ## for log
            ##preds.cur <- predict(mdl, X.test1.cv, type = 'response')
            preds.cur <- predict(mdl, X.test1.cv, type = 'prob')
            #print(preds.cur)
            preds[,k] <- preds.cur[, 1]
            #print(preds)
            ## TODO: move one step deeper
        }
        preds.combined <- rowSums(preds) / m
        errs <- sum(abs((preds.combined > 0.5) - (as.numeric(X.test1.cv$y) - 1)))
        print(1 - (errs / length(X.test1.cv$y)))
    }
}
preds.cur
preds.cur[, 1]
preds.cur[, "1"]
preds.cur$1
preds.cur$0
typeof(preds.cur)
preds.cur[1]
preds.cur[2\]
preds.cur[2]
data.frame(preds.cur)
levels(preds.cur)
attr(preds.cur)
attr(preds.cur, "prob")
attr(preds.cur, "prob")[, 1]
attr(preds.cur, "prob")[, 1]
pairs.panels(X.train)
head(svm.transduction)
head(svm.transduction$tr)
head(svm.transduction$ind)
svm.transduction$ind
svm.transduction$tr
head(X.train2.cv)
